////////////////////////////////////////////////////////////////////////////////
///
///     @file       SkyFragment.h
///     @author     User
///     @date       
///
///     @brief      SkyFragmentShader
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      Compilation defines 

#define D_USE_NOISETEXTURE

#ifdef D_PLATFORM_ORBIS
#pragma argument(targetoccupancy_atallcosts=70)
#pragma argument(unrollallloops)
#endif

//-----------------------------------------------------------------------------
//      Include files

#include "Common/Defines.shader.h"
#include "Common/CommonUniforms.shader.h"
#include "UberCommon.h"

#include "Common/Common.shader.h"
#include "Common/CommonPlanet.shader.h"
#include "Common/CommonScattering.shader.h"
#include "Common/CommonNoise.shader.h"

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

//-----------------------------------------------------------------------------
///
///     Input
///
///     @brief  Input
///
//-----------------------------------------------------------------------------
DECLARE_INPUT
    IN_SCREEN_POSITION
    
    INPUT( vec4, mWorldPositionVec4,        TEXCOORD0 )
    INPUT( vec4, mLocalPositionVec4,        TEXCOORD1 )
    INPUT( vec3, mSpaceCloudColourGCVec3,   TEXCOORD2 )
    INPUT( vec3, mSunDirectionVec3,         TEXCOORD3 )
    INPUT( vec2, mTexCoordsVec2,            TEXCOORD4 )

DECLARE_END


//-----------------------------------------------------------------------------
//    Functions

//-----------------------------------------------------------------------------
///
///     KalisetStars
///
///     @brief      KalisetStars
///
///     @param      void
///     @return     Nothing.
///
//-----------------------------------------------------------------------------
#ifdef D_LOWQUALITY

float 
KalisetStars(
    vec3 lPositionVec3 )
{
    lPositionVec3 += vec3(1.35,1.54,1.23);
    lPositionVec3 *= 0.3;
    for (int i=0; i<9; i++)
    {
        lPositionVec3.xyz=abs(lPositionVec3.xyz);
        lPositionVec3=lPositionVec3/dot(lPositionVec3,lPositionVec3);
        lPositionVec3=lPositionVec3*1.-vec3(.9);
    }	
    return dot(lPositionVec3,lPositionVec3)*.003;
}


#else

float 
KalisetStars(
    vec3 lPositionVec3 )
{
    lPositionVec3 += vec3(1.35,1.54,1.23);
    lPositionVec3 *= 0.3;

    for (int i=0; i<18; i++)
    {
        lPositionVec3.xyz=abs(lPositionVec3.xyz);
        lPositionVec3=lPositionVec3/dot(lPositionVec3,lPositionVec3);
        lPositionVec3=lPositionVec3*1.-vec3(.9);
    }
    
    return pow(length(lPositionVec3),1.5)*.04;
}
#endif



//-----------------------------------------------------------------------------
///
///     Main
///
///     @brief      Main Fragment
///
///     @param      void
///     @return     Nothing.
///
//-----------------------------------------------------------------------------
FRAGMENT_MAIN_COLOUR_SRT
{
    vec3 lInScatteringMieVec3;
    vec3 lInScatteringRayleighVec3;

    float lfStarDensity;
    vec3   lSkyColourVec3 = vec3( 0.0 );

    vec3  lLightPositionVec3 = lUniforms.mpCustomPerMaterial->gSunPositionVec4.xyz;

    vec3  lViewPositionVec3 = vec3( 0.0 );
    vec3  lWorldPositionVec3 = normalize( IN( mWorldPositionVec4 ).xyz - lUniforms.mpPerFrame->gViewPositionVec3 );
    vec3  lLocalPositionVec3 = normalize( IN( mLocalPositionVec4 ).xyz );

    // Get params from uniforms
    float lfAtmosphereSize = lUniforms.mpCustomPerMaterial->gScatteringParamsVec4.b;


    vec3  lSunWavelengthVec3 = ( lUniforms.mpCommonPerMesh->gLightColourVec4.rgb );


    vec3  lSpaceSkyColour1Vec3     = lUniforms.mpCustomPerMaterial->gSpaceSkyColour1Vec4.rgb;
    vec3  lSpaceSkyColour2Vec3     = lUniforms.mpCustomPerMaterial->gSpaceSkyColour2Vec4.rgb;
    vec3  lSpaceSkyColour3Vec3     = lUniforms.mpCustomPerMaterial->gSpaceSkyColour3Vec4.rgb;

    float lfSpaceSunSize           = lUniforms.mpCustomPerMaterial->gSpaceSkyColour3Vec4.a;
    float lfSpaceCenterPowerVec3   = lUniforms.mpCustomPerMaterial->gSpaceSkyColour2Vec4.a;
                                   
    vec3  lSunColour               = lUniforms.mpCustomPerMaterial->gSpaceSunColourVec4.rgb;

    vec4 lFragmentColourVec4 = vec4( 1.0 );

        lSpaceSkyColour1Vec3 *= 0.125; // -jever
        lSpaceSkyColour2Vec3 *= 0.250; // -j
        lSpaceSkyColour3Vec3 *= 0.175; // -j

    lFragmentColourVec4.rgb = saturate( GetSpaceColour(
        lWorldPositionVec3,
        lViewPositionVec3,
        lLightPositionVec3,
        lSpaceSkyColour1Vec3,
        lSpaceSkyColour2Vec3,
        lSpaceSkyColour3Vec3,
        lfSpaceCenterPowerVec3 ) );

#ifdef D_LOWQUALITY
    float lfLodBias = 2.0;
#else
    float lfLodBias = 0.0;
#endif

    vec3 lSunScatteringVec3 = InScatteringPhase(
        vec3( 1.0 ),
        lSunColour,
        1.0,
        1.0,
        MiePhase( lLightPositionVec3, lWorldPositionVec3, lfSpaceSunSize ) );
    

    {
        //vec3  lSpaceCloudColourVec3    = lUniforms.mpCustomPerMaterial->gSpaceCloudColourVec4.rgb;
        vec3  lSpaceCloudColourVec3    = vec3(1.0,1.0,1.0); // -j
        vec3  lSpaceNebulaColour1Vec3  = lUniforms.mpCustomPerMaterial->gSpaceNebulaColour1Vec4.rgb;
        vec3  lSpaceNebulaColour2Vec3  = lUniforms.mpCustomPerMaterial->gSpaceNebulaColour2Vec4.rgb;
        vec3  lSpaceNebulaColour3Vec3  = lUniforms.mpCustomPerMaterial->gSpaceNebulaColour3Vec4.rgb;
        vec3  lSpaceNebulaColour4Vec3  = lUniforms.mpCustomPerMaterial->gSpaceNebulaColour4Vec4.rgb;

        float lfRandom1                = lUniforms.mpCustomPerMaterial->gSpaceCloudColourVec4.a * 100.0f;
        float lfRandom2                = lUniforms.mpCustomPerMaterial->gSpaceCloudColourVec4.a * 100.0f;
                                       
        float lfScale1                 = lUniforms.mpCustomPerMaterial->gSpaceNebulaColour1Vec4.a;
        float lfScale2                 = lfScale1;

        float lfNebulaOffset           = lUniforms.mpCustomPerMaterial->gSpaceNebulaColour2Vec4.a;
        float lfCloudScale             = lUniforms.mpCustomPerMaterial->gSpaceNebulaColour3Vec4.a;
        float lfCloudOffset            = lUniforms.mpCustomPerMaterial->gSpaceSkyColour1Vec4.a;

        float lfNebulaCoverageScale    = lUniforms.mpCustomPerMaterial->gSpaceNebulaColour4Vec4.a;
        float lfNebulaCoverageStrength = lUniforms.mpCustomPerMaterial->gSpaceNormalParamsVec4.a;

        float lfShadowOffset           = lUniforms.mpCustomPerMaterial->gSpaceNebulaParamsVec4.r;
        float lfNebulaBrightness       = lUniforms.mpCustomPerMaterial->gSpaceNebulaParamsVec4.g;
        float lfAnimationSpeed         = lUniforms.mpCustomPerMaterial->gSpaceNebulaParamsVec4.b;
        float lfCloudBrightness        = lUniforms.mpCustomPerMaterial->gSpaceNebulaParamsVec4.a;

        float lfBlend1                 = lUniforms.mpCustomPerMaterial->gSpaceNormalParamsVec4.r;
        float lfBlend2                 = lUniforms.mpCustomPerMaterial->gSpaceNormalParamsVec4.g;
        float lfBlend3                 = lUniforms.mpCustomPerMaterial->gSpaceNormalParamsVec4.b;
        float lfBlend4                 = 1.0;

        vec3 lRandom2   = vec3( lfRandom2 )            + lLocalPositionVec3 * sin( lUniforms.mpPerFrame->gfTime * lfAnimationSpeed );
        vec3 lRandom3   = vec3( lfRandom1 + 1000.0f  ) + lLocalPositionVec3 * sin( lUniforms.mpPerFrame->gfTime * 0.001 );

        float lfNebula          = 0.0;
        vec3  lNebulaColourVec3 = vec3(0.0);

        float lfCloudNoise = FractBrownianMotion4( lLocalPositionVec3 * lfCloudScale + vec3( lfRandom1 ), SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gNoiseMap ) );
        lfCloudNoise = smoothstep( 0.0, 1.1, lfCloudNoise * lfCloudBrightness + lfCloudOffset );

        if ( (lfCloudNoise > (1.0/1024.0)) && (lfNebulaOffset > -1.0) )
        {
			lfNebulaBrightness *= 0.450; // -j
			lSpaceCloudColourVec3 *= 0.0044; //-j
            float lfNebulaCoverage = clamp( FractBrownianMotion4( lLocalPositionVec3 * lfNebulaCoverageScale + lRandom3, SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gNoiseMap ) ) + lfNebulaCoverageStrength, 0.0, 1.0 );    
            float lfNebulaNoise    = max( (lfCloudNoise + lfNebulaOffset ) / (1.0 + lfNebulaOffset) * lfNebulaCoverage, 0.0 ) * lfNebulaBrightness;
            if( lfNebulaNoise > 0.0 )
            {
                lfNebula        = DistortedNoise( lLocalPositionVec3 + lRandom2, lfScale1, lfScale2, SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gNoiseMap ) );
                float lfShadow  = DistortedNoise( lLocalPositionVec3 * lfShadowOffset + lRandom2, lfScale1, lfScale2, SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gNoiseMap ) );
                lfNebula        = lfNebula * lfNebula * lfNebula * lfNebula * lfNebula;
                lfShadow        = lfShadow * lfShadow * lfShadow;
                       
                lfNebula        = saturate( lfNebula );
                lfShadow        = saturate( lfShadow );

                lfNebula        *= lfNebulaNoise;
                lfShadow        *= lfNebulaNoise;

                float lfNoiseBlend1    = clamp( ( lfNebula - lfBlend1 ) / ( lfBlend2 - lfBlend1 ), 0.0, 1.0 );
                float lfNoiseBlend2    = clamp( ( lfNebula - lfBlend3 ) / ( lfBlend4 - lfBlend3 ), 0.0, 1.0 );
                lNebulaColourVec3      = mix( lSpaceNebulaColour2Vec3, lSpaceNebulaColour3Vec3 * 3.0, lfNoiseBlend2 );
                lNebulaColourVec3      = mix( lSpaceNebulaColour1Vec3, lNebulaColourVec3, lfNoiseBlend1 );

                lSpaceCloudColourVec3 -= lfShadow * lSpaceNebulaColour4Vec3;
                lSpaceCloudColourVec3 += lfNebula * lNebulaColourVec3;
            }
            lFragmentColourVec4.rgb = mix(lFragmentColourVec4.rgb, lSpaceCloudColourVec3, lfCloudNoise);
            vec3 lSunScattering2Vec3 = vec3(MiePhase(lLightPositionVec3, lWorldPositionVec3, 0.9) * 0.2);
            lFragmentColourVec4.rgb += (lSpaceCloudColourVec3 * lfCloudNoise) * lSunScattering2Vec3 * 0.3;
        }   
    }

    lFragmentColourVec4.rgb += lSunScatteringVec3;

    FRAGMENT_COLOUR = lFragmentColourVec4;
}




